the while statement, Like all repetition control structures, it has a termination condition, implemented
as a boolean expression, that will continue as long as the expression evaluates to true.

a while loop is similar to an if statement in that it is composed
of a boolean expression and a statement, or a block of statements. During execution, the
boolean expression is evaluated before each iteration of the loop and exits if the evaluation
returns false.
EXAMPLE:Let’s see how a loop can be used to model a mouse eating a meal:
 int roomInBelly = 5;
 public void eatCheese(int bitesOfCheese) {
   while (bitesOfCheese > 0 && roomInBelly > 0) {
       bitesOfCheese--;
          roomInBelly--;
          }
          System.out.println(bitesOfCheese+" pieces of cheese left");
         }

-The do/while Statement
Unlike a while loop, though, a do/while loop guarantees that the statement or block
will be executed at least once.

-Infinite Loops
An infinite loop is a loop whose termination condition is never reached during runtime.

- for Loops
Let’s take a look at an example that prints the first five numbers, starting with zero:
for(int i = 0; i < 5; i++) {
 System.out.print(i + " ");
} 0 1 2 3 4

-Printing Elements in Reverse
for (var counter = 4; counter >= 0; counter--) {
 System.out.print(counter + " ");
}4 3 2 1 0

-IMPORTANT!!!!
You should familiarize yourself with the following five examples; variations of these are likely to be seen on the exam.
1. Creating an Infinite Loop
for( ; ; ) //Note that the semicolons separating the three sections are required, as for( ) without
             any semicolons will not compile
 System.out.println("Hello World");

 2. Adding Multiple Terms to the for Statement
 int x = 0;
 for(long y = 0, z = 4; x < 5 && y < 10; x++, y++) {
  System.out.print(y + " "); }
 System.out.print(x + " ");//This code will print the following when executed:
  0 1 2 3 4 5

 EXPLANATION:
 In this code, you have a for loop that iterates over the variables x, y, and z. Let's go through the code step by step:
int x = 0; initializes x to 0.
In the for loop:
long y = 0, z = 4; initializes y to 0 and z to 4.
The loop continues as long as both x is less than 5 and y is less than 10.
In each iteration of the loop, x is incremented by 1 (x++) and y is incremented by 1 (y++).
The loop body System.out.print(y + " "); prints the value of y followed by a space in each iteration.
After the loop, System.out.print(x + " "); prints the value of x followed by a space.
Now, let's break down what happens in each iteration:
In the first iteration, x is 0, y is 0, and z is 4. y is less than 10, so the loop prints 0 and increments x and y.
In the second iteration, x is 1, y is 1, and z is 4. y is less than 10, so the loop prints 1 and increments x and y.
This process continues until the fourth iteration when x becomes 4 and y becomes 4. The loop prints 4 and increments x and y.
In the fifth iteration, x becomes 5, and y becomes 5. The loop checks the conditions (x less than 5 and y less than 10) and finds that x is no longer less than 5, so it exits the loop.
After the loop, the code prints the value of x, which is 5.

3. Redeclaring a Variable in the Initialization Block
int x = 0;
for(int x = 4; x < 5; x++) // DOES NOT COMPILE BECAUSE
 System.out.print(x + " ");
 doesnt compile because: x is repeated in the initialization block after
 already being declared before the loop, resulting in the compiler stopping because of
 a duplicate variable declaration. to fix it:
 int x = 0;
 for(x = 0; x < 5; x++)
  System.out.print(x + " ");
 Note that this variation will now compile because the initialization block simply assigns
 a value to x and does not declare it.

 4. Using Incompatible Data Types in the Initialization Block
 int x = 0;
 for(long y = 0, int z = 4; x < 5; x++) // DOES NOT COMPILE
  System.out.print(y + " "); // The variables in the initialization block must all be of the same type

5. Using Loop Variables Outside the Loop
5. Using Loop Variables Outside the Loop
for(long y = 0, x = 4; x < 5 && y < 10; x++, y++)
 System.out.print(y + " ");
System.out.print(x); // DOES NOT COMPILE. Since x was only scoped for the
loop, using it outside the loop will cause a compiler error.

-The for-each Loop
The for-each loop declaration is composed of an initialization section and an object to be
iterated over. The right side of the for-each loop must be one of the following:
■ A built-in Java array such as a List or a Set.
■ An object whose type implements java.lang.Iterable

IMPORTANT!!!!
it does not include all of the Collections Framework classes r interfaces, but only those that implement or extend that Collection interface.
Map is not supported in a for-each loop.

-The left side of the for-each loop must include a declaration for an instance of a variable
 whose type is compatible with the type of the array or collection on the right side of the
 statement

 NESTED LOOPS
 A nested loop is a loop that contains another loop, including while, do/while,
 for, and for-each loops. EXAMPLE:
 int[][] myComplexArray = {{5,2,1,3},{3,9,8,9},{5,7,12,7}};
 for(int[] mySimpleArray : myComplexArray) {
  for(int i=0; i<mySimpleArray.length; i++) {
  System.out.print(mySimpleArray[i]+"\t");
  }
  System.out.println();
 } When we execute this code, we see the following output:
 5 2 1 3
 3 9 8 9
 5 7 12 7
 Nested loops can include while and do/while, as shown in this examplE:
 int hungryHippopotamus = 8;
 while(hungryHippopotamus>0) {
  do {
  hungryHippopotamus -= 2;
  } while (hungryHippopotamus>5);
  hungryHippopotamus--;
  System.out.print(hungryHippopotamus+", ");//3,0
 }EXPLANATION
 This code uses a while loop to simulate a hungry hippopotamus. Let's break down what happens step by step:
 int hungryHippopotamus = 8; initializes the hungryHippopotamus variable to 8.
 The while loop: while(hungryHippopotamus > 0) checks whether hungryHippopotamus is greater than 0. As long as this condition is true, the loop will continue.
 Inside the while loop, there is a nested do-while loop. This loop subtracts 2 from hungryHippopotamus as long as hungryHippopotamus is greater than 5. This means it keeps subtracting 2 until hungryHippopotamus is 6 or less.
 After the nested do-while loop, hungryHippopotamus-- decrements hungryHippopotamus by 1.
 The code prints the value of hungryHippopotamus followed by a comma and a space.
 The loop continues until hungryHippopotamus is no longer greater than 0. Let's go through the iterations:
 In the first iteration, hungryHippopotamus becomes 6 (from 8 - 2), and it prints "6, ".
 In the second iteration, the do-while loop doesn't run because hungryHippopotamus is no longer greater than 5. hungryHippopotamus becomes 5 (from 6 - 1), and it prints "5, ".
 In the third iteration, the do-while loop doesn't run again, and hungryHippopotamus becomes 4 (from 5 - 1). It prints "4, ".
 This process continues until hungryHippopotamus is 0.
 When hungryHippopotamus becomes 0, the while loop's condition is no longer true, and the loop terminates.

 Adding Optional Labels
A label is an optional pointer to the head
of a statement that allows the application flow to jump to it or break from it. It is a single
identifier that is followed by a colon (:) FOR EXAMPLE:
int[][] myComplexArray = {{5,2,1,3},{3,9,8,9},{5,7,12,7}};
OUTER_LOOP: for(int[] mySimpleArray : myComplexArray) {
 INNER_LOOP: for(int i=0; i<mySimpleArray.length; i++) {
 System.out.print(mySimpleArray[i]+"\t");
 }
 System.out.println();
}

-The break Statement
a break statement transfers the flow ssof control out to the enclosing statement

The continue Statement
the continue statement, a statement that causes flow to finish the execution of the current loop iteration
continue statement is applied to the nearest inner loop under execution, using optional label
statements to override this behavior.

1: public class CleaningSchedule {
2: public static void main(String[] args) {
3: CLEANING: for(char stables = 'a'; stables<='d'; stables++) {
4: for(int leopard = 1; leopard<4; leopard++) {
5: if(stables=='b' || leopard==2) {
Optional reference to head of loop
Colon (required if optionalLabel is present)
Semicolon (required)
continue keyword
optionalLabel: while(booleanExpression) {
 // Body
 // Somewhere in the loop
 continue optionalLabel;
}
6: continue CLEANING;
7: }
8: System.out.println("Cleaning: "+stables+","+leopard);
9: } } } }
With the structure as defined, the loop will return control to the parent loop any time the
first value is b or the second value is 2. On the first, third, and fourth executions of the outer
loop, the inner loop prints a statement exactly once and then exits on the next inner loop
when leopard is 2. On the second execution of the outer loop, the inner loop immediately
exits without printing anything since b is encountered right away. The following is printed:
Cleaning: a,1
Cleaning: c,1
Cleaning: d,1


IMPORTANT!!!
While the break statement transfers control to the enclosing statement, the continue statement transfers control to the boolean expression that determines if the loop should continue.
In other words, it ends the current iteration of the loop.
-Just remember that return statements
 can be used to exit loops quickly and can lead to more readable code in practice, especially
 when used with nested loops

 VERY IMPORTANT!!!!!:
Here are some guidelines to help you determine if code is inside or outside of a loop:

Inside a Loop:
Any code that is within the opening and closing curly braces { } of a loop is considered inside the loop.
For for, while, and do-while loops, the code within the loop body is considered inside the loop.
Code that comes after the loop closing curly brace is considered outside the loop.
Example of code inside a loop:
while (condition) {
    // Code inside the loop
    // This code is executed as part of the loop.
}
// Code outside the loop
// This code is executed after the loop.

Using Labels:
If you use labeled loops, you can use the continue statement with a label to control which loop to continue.
Code after the continue statement with a label is considered outside of the loop with that label.
Example of using labeled loops and the continue statement:

OUTER_LOOP: for (int i = 0; i < 3; i++) {
    INNER_LOOP: for (int j = 0; j < 3; j++) {
        if (someCondition) {
            continue OUTER_LOOP; // This continues the outer loop.
        }
        // Code inside the inner loop
    }
    // Code inside the outer loop
}
// Code outside both loops





- The return Statement

return statements can be used as an alternative to using labels and break statements. For
example, take a look at this rewrite of our earlier FindInMatrix class:
public class FindInMatrixUsingReturn {
 private static int[] searchForValue(int[][] list, int v) {
 for (int i = 0; i < list.length; i++) {
 for (int j = 0; j < list[i].length; j++) {
 if (list[i][j] == v) {
 return new int[] {i,j};
 }
 }
 }
 return null;
 }
 public static void main(String[] args) {
 int[][] list = { { 1, 13 }, { 5, 2 }, { 2, 2 } };
 int searchValue = 2;
 int[] results = searchForValue(list,searchValue);
 if (results == null) {
 System.out.println("Value " + searchValue + " not found");
 } else {
 System.out.println("Value " + searchValue + " found at: " +
 "(" + results[0] + "," + results[1] + ")");
 }
 }
}

-Unreachable Code
Unreachable Code
One facet of break, continue, and return that you should be aware of is that any code
placed immediately after them in the same block is considered unreachable and will not
compile. For example, the following code snippet does not compile:
int minute = 1;
WATCH: while(minute>2) {
 if(minute++>2) {
 continue WATCH;
 System.out.print(minute); // DOES NOT COMPILE.statement is outside the loop because it's placed
 after the continue WATCH; statement
 }
}

-Reviewing Branching
