IMPORTANT!!!!
A switch expression supports only the primitives int, byte, short,
and char, along with their associated wrapper classes Integer, Byte, Short, and
Character.. It also supports enum and String,supports var if the type can be resolved to a supported switch data type



Applying switch Statements
,switch Statements s a complex decision-making structure in
which a single value is evaluated and flow is redirected to the first matching branch, known
as a case statement. If no such case statement is found that matches the value, an optional
Applying switch Statements 111
default statement will be called. If no such default option is available, the entire switch
statement will be skipped.

e you should be aware of for the exam: a switch statement is not required to
contain any case statements. For example, this statement is perfectly valid:
switch(month) {}

EXAMPLE OF SWITCH STATEMENT:
public void printDayOfWeek(int day) {
            switch(day) {
            case 0:
            System.out.print("Sunday");
            break;
            case 1:
            System.out.print("Monday");
            break;
            case 2:
            System.out.print("Tuesday");
            break;
            case 3:
            System.out.print("Wednesday");
            break;
            case 4:
            System.out.print("Thursday");
            break;
            default:
            System.out.print("Invalid value");
            break; // A break statement terminates the switch statement
                      and returns flow control to the enclosing process. Put simply, it ends the switch statement
                      immediately.
                      The break statements are optional, but without them the code will execute every branch
                      following a matching case statement, including any default statements it finds. Without break
                      statements in each branch, the order of case and default statements is now extremely important
            } }

 Selecting switch Data Types
a switch statement has a target variable that is not evaluated until
runtime. The type of this target can include select primitive data types (int, byte, short, char)
and their associated wrapper classes (Integer, Byte, Short, Character). The following is a list of
all data types supported by switch statements:
■ int and Integer
■ byte and Byte
■ short and Short
■ char and Character
■ String
■ enum values
■ var (if the type resolves to one of the preceding types)

IMPORTANT!!!: THOSE ARE NOT  PERMITTED IN SWITCH STATEMENT:
Notice that boolean, long, float, and double are excluded from
switch statements, as are their associated Boolean, Long, Float, and
Double classes.

Determining Acceptable Case Values
This means you can use only literals, enum constants, or final constant variables
of the same data type. By final constant, we mean that the variable must be marked with
the final modifier and initialized with a literal value in the same expression in which it
is declared.

The switch Expression
A switch expression is a much more compact form of a switch statement, capable of
returning a value.
The switch expression supports two types of branches: an expression and
a block. Each has different syntactical rules on how it must be created. More on these
topics shortly.
Each case or default expression requires a semicolon as well as
the assignment itself. example:
var result = switch(bear) {
 case 30 -> "Grizzly";
 default -> "Panda";
};

case statements can take multiple values, separated by commas.
EXAMPLE:public void printSeason(int month) {
         switch(month) {
         case 1, 2, 3 -> System.out.print("Winter");
         case 4, 5, 6 -> System.out.print("Spring");
         case 7, 8, 9 -> System.out.print("Summer");
         case 10, 11, 12 -> System.out.print("Fall");
         } }
 Calling printSeason(2) prints the single value Winter

 SWITCH EXPRESSION RULES:
 1. All of the branches of a switch expression that do not throw an exception must return
  a consistent data type (if the switch expression returns a value).
 2. If the switch expression returns a value, then every branch that isn’t an expression must
   yield a value.
 3. A default branch is required unless all cases are covered or no value is returned

 Returning Consistent Data Types
The first rule of using a switch expression is ou can’t return incompatible or random data types.
For example: int measurement = 10;
             int size = switch(measurement) {
              case 5 -> 1;
              case 10 -> (short)2;
              default -> 5;
              case 20 -> "3"; // DOES NOT COMPILE
              case 40 -> 4L; // DOES NOT COMPILE
              case 50 -> null; // DOES NOT COMPILE
             }; THE LAST 3 ARE RETURNING A VALUE THAT CANNOT BE ASSIGNED TO THE INT VARIABLE.


Applying a case Block
A switch expression supports both an expression and a block in the case and default
branches. Like a regular block, a case block is one that is surrounded by braces ({}). It also
includes a yield statement if the switch expression returns a value.
-The yield keyword is equivalent to a return statement within a switch expression and
 is used to avoid ambiguity about whether you meant to exit the block or method around the
 switch expression.
 . Can you see why the following lines do not compile?
 10: int fish = 5;
 11: int length = 12;
 12: var name = switch(fish) {
 13: case 1 -> "Goldfish";
 14: case 2 -> {} // DOES NOT COMPILE
 15: case 3 -> {
 16: if(length > 10) yield "Blobfish";
 17: } // DOES NOT COMPILE
 18: default -> "Swordfish";
 19: };
 Line 14 does not compile because it does not return a value using yield. Line 17 also
 does not compile. While the code returns a value for length greater than 10, it does not
 return a value if length is less than or equal to 10. It does not matter that length is set to
 be 12; all branches must yield a value within the case block.

 IMPORTANT!!

 Unlike a regular switch statement, a switch expression can be used with the assignment
 operator and requires a semicolon when doing so. Furthermore, semicolons are required
 for case expressions but cannot be used with case blocks.
  var name = switch(fish) {
  case 1 -> "Goldfish" // DOES NOT COMPILE (missing semicolon)
 Applying switch Statements 119
 120 Chapter 3 ■ Making Decisions
  case 2 -> {yield "Trout";}; // DOES NOT COMPILE (extra semicolon)
  ...
  } // DOES NOT COMPILE (missing semicolon)

 -Covering All Possible Values
: a switch expression that returns a value must handle all possible input values
. Every switch expression must handle all possible values of the switch variable. As a developer,
there are two ways to address this:
■ Add a default branch.
■ If the switch expression takes an enum value, add a case branch for every possible
enum value.
In practice, the first solution is the one most often used. The second solution applies only
to switch expressions that take an enum