An enumeration, or enum for short, is like a fixed set of constants.

Creating Simple Enums
To create an enum, declare a type with the enum keyword, a name, and a list of values
public(public or package access) enum Season (enum name){
 WINTER, SPRING, SUMMER, FALL; <-- Enum values(, separated) . ; optional for simple enums.

 We refer to an enum that only contains a list of values as a simple enum. When working
 with simple enums, the semicolon at the end of the list is optional.

 Important!! One thing that you can’t do is extend an enum.
 public enum ExtendedSeason extends Season {} // DOES NOT COMPILE
The values in an enum are fixed. You cannot add more by extending the enum.

Calling the values(), name(), and ordinal() Methods
An enum provides a values() method to get an array of all of the values. You can use this like
any normal array, including in a for-each loop:
for(var season: Season.values()) {
 System.out.println(season.name() + " " + season.ordinal());
}

Calling the valueOf () Method
useful feature to retrieve an enum value from a String.

-Using Enums in switch Statements
Season summer = Season.SUMMER;
switch(summer) {
 case WINTER:
 System.out.print("Get out the sled!");
 break;
 case SUMMER:
 System.out.print("Time for the pool!");
 break;
 default:
 System.out.print("Is it summer yet?");
}
- Adding Constructors, Fields, and Methods
All enum constructors are implicitly private, with the modifier being optional
an enum constructor will not compile if it contains a public or protected modifier.

How do we call an enum method? That’s easy, too: we just use the enum value followed
by the method call.
Season.SUMMER.printExpectedVisitors();

An enum can even implement an interface, as this just requires overriding the
abstract methods:
public interface Weather { int getAverageTemperature(); }
public enum Season implements Weather {
 WINTER, SPRING, SUMMER, FALL;
 public int getAverageTemperature() { return 30; }
}