Declaring Local and Instance Variables

REMEMBER:: all local variable references are destroyed after the block is executed, but the objects they point to may
still be accessible.

-Local Variable Modifiers
There’s only one modifier that can be applied to a local variable: final

public void zooAnimalCheckup(boolean isWeekend) {
 final int rest;//You declare rest as a final variable, which means it can only be assigned a value once.
 if(isWeekend) rest = 5; else rest = 20;// THIS IS FINE BECAUSE you're assigning a value to it only once in both branches
 System.out.print(rest);
 final var giraffe = new Animal();
 final int[] friends = new int[5];
 rest = 10; // DOES NOT COMPILE because rest is declared final which makes it immutable.
 giraffe = new Animal(); // DOES NOT COMPILE because ou attempt to reassign it with a new Animal object. and originally
 you had already declare giraffe as final.
 friends = null; // DOES NOT COMPILE friends has already been declared as final so you cannot reassign it.
}

example#2:
public void zooAnimalCheckup(boolean isWeekend) {
final int rest;
if(isWeekend) rest = 5;
System.out.print(rest); // DOES NOT COMPILE because you're trying to print rest outside the if block,
}

-Effectively Final Variables
An effectively final local variable is one that is not modified after it is assigned.

-IMPORTANT!!! final Specifies that the instance variable must be initialized with each instance of the class exactly once
If an instance variable is marked final, then it must be assigned a value when it is declared or when the object is instantiated.

-Working with Varargs
There are a number of important rules for creating a method with a varargs parameter.
Rules for Creating a Method with a Varargs Parameter
1. A method can have at most one varargs parameter.
2. If a method contains a varargs parameter, it must be the last parameter in the list.

Example: public class VisitAttractions {
public void walk1(int... steps) {}
public void walk2(int start, int... steps) {}
public void walk3(int... steps, int start) {} // DOES NOT COMPILE because Varargs must be the last parameter, so int start should come before int... steps. This will result in a compilation error.
public void walk4(int... start, int... steps) {} // DOES NOT COMPILE  because You cannot have two varargs parameters in the same method
 }

 -Calling Methods with Varargs
When calling a method with a varargs parameter, you have a choice. You can pass in an
array, or you can list the elements of the array and let Java create it for you.

Applying Access Modifiers
Private Access : remember, only code in the same class can call a private method or access a private field.

Package Access: allows classes in the same package to access her members.
Remember that when there is no access modifier on a member, only classes
in the same package can access the member

Protected Access: Protected access allows everything that package access does, and more. The protected
access modifier adds the ability to access members of a parent class
public class Fish {}//parent class
public class ClownFish extends Fish {}//child class
By extending a class, the subclass gains access to all protected and public members
of the parent class, as if they were declared in the subclass

1: package pond.swan; // Different package than Bird
2: import pond.shore.Bird;
3: public class Swan extends Bird { // Swan is a subclass of Bird
4: public void swim() {
5: floatInWater(); // protected access is ok
6: System.out.print(text); // protected access is ok
7: }
8: public void helpOtherSwanSwim() {
9: Swan other = new Swan();
10: other.floatInWater(); // subclass access to superclass
11: System.out.print(other.text); // subclass access to superclass
12: }
13: public void helpOtherBirdSwim() {
14: Bird other = new Bird();
15: other.floatInWater(); // DOES NOT COMPILE because other.floatInWater(); does not compile because other is of type Bird, and the Bird class does not have a floatInWater method
16: System.out.print(other.text); // DOES NOT COMPILE he text field is not accessible through the Bird reference, even though it's inherited by the Goose class.
17: }
18: }
the protected rules apply under two scenarios:
■ A member is used without referring to a variable. This is the case on lines 5 and 6. In
this case, we are taking advantage of inheritance, and protected access is allowed.
■ A member is used through a variable. This is the case on lines 10, 11, 15, and 16. In this
case, the rules for the reference type of the variable are what matter. If it is a subclass,
protected access is allowed. This works for references to the same class or a subclass.

Public Access : public means anyone can access the member from anywhere.


Accessing static Data
Methods and variables declared static don’t require an instance of the class. They are shared among all
users of the class.

The main() method is a static
method. That means you can call it using the class name:
public class Koala {
 public static int count = 0; // static variable
 public static void main(String[] args) { // static method
 System.out.print(count);
 }
}

In addition to main() methods, static methods have two main purposes:
■ For utility or helper methods that don’t require any object state. Since there is no need
to access instance variables, having static methods eliminates the need for the caller to
instantiate an object just to call the method.
■ For state that is shared by all instances of a class, like a counter. All instances must share the same states. Methods that merely use that state should be static as well.

Accessing a static Variable or Method
Usually, accessing a static member is easy.You just put the class name before the method or variable, and you are done

rule: You can use an instance of the object to call a static method.

Class vs. Instance Membership
IMPORTANT!!! Only an instance method can call another instance method on the same class without using a reference variable, because instance methods do require an object. Similar logic applies for instance and
static variables.

1: public class Gorilla {
2: public static int count;
3: public static void addGorilla() { count++; }
4: public void babyGorilla() { count++; }
5: public void announceBabies() {
6: addGorilla();
7: babyGorilla();
8: }
9: public static void announceBabiesToEveryone() {
10: addGorilla();
11: babyGorilla(); // DOES NOT COMPILE BECAUSE A STATIC METHOD CANNOT CALL AN INSTANCE METHOD.
12: }
13: public int total;
14: public static double average
15: = total / count; // DOES NOT COMPILE because a static variable is trying to use an instance variable.



Important: inside of a static method we are not allowed to refer to any non static field.
non-static field only make sense in the context of an individual object.inside a static method where you operate at a class level it doesnt make sense to refer to any non-static field.

You can access static field and method through individual objects.


static Variable Modifiers
constant. It uses the final modifier to ensure the variable
never changes.
Constants use the modifier static final and a different naming convention than
other variables. They use all uppercase letters with underscores between “words.” Here’s
an example:
public class ZooPen {
 private static final int NUM_BUCKETS = 45;
 public static void main(String[] args) {
 NUM_BUCKETS = 5; // DOES NOT COMPILE
 }
}

static Initializers
All static initializers run when the class is first used, in the order they are defined
14: private static int one;
15: private static final int two; REMEMBER because it is static, the variable can only be initialize once in a static block.
16: private static final int three = 3; here we declared a final variable and assign it to a value already.
17: private static final int four; // DOES NOT COMPILE because it declare a variable that never gets initialized.
18: static {
19: one = 1;
20: two = 2;
21: three = 3; // DOES NOT COMPILE because we already assigned it a value we cant do it again.
22: two = 4// DOES NOT COMPILE because it is the 2nd time you try to assign it a value
23: }

what are static Imports?
 Regular imports are for importing classes, while static imports are for importing static members of
classes like variables and methods.

EXAMPLE!!! import java.util.List;
import static java.util.Arrays.asList; // static import.. We are importing the asList method so everytime
we refer to asList in the class it will call Arrays.asList()
public class ZooParking {
public static void main(String[] args) {
List<String> list = asList("one", "two"); // No Arrays. prefix
}
}

BEWARE OF THE EXAM TRICKS LIKE SO...
1: import static java.util.Arrays; // DOES NOT COMPILE because we are using a static import to import a class
Remember, static imports are only for importing static members like a method or variable.
2: import static java.util.Arrays.asList;
3: static import java.util.Arrays.*; // DOES NOT COMPILE because its in the wrong order. its suppose to be import static.
4: public class BadZooParking {
5: public static void main(String[] args) {
6: Arrays.asList("one"); // DOES NOT COMPILE asList("one") is fine since we imported it however, we never imported Array so it wont work.
7: }}

Important!! importing 2 static method of the same name will give an Compiler error.
Here’s an example:
import static zoo.A.TYPE;
import static zoo.B.TYPE; // DOES NOT COMPILE