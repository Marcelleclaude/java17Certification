You need an import statement to work with the
modern date and time classes. To use it, add this import to your program:
 import java.time.*; // import time classes

 You obtain date and time instances using a static method:Each of the four classes has a static method called now(), which gives the current date
and time.
 System.out.println(LocalDate.now());Contains just a date—no time and no time zone
 System.out.println(LocalTime.now());Contains just a time—no date and no time zone
 System.out.println(LocalDateTime.now());Contains both a date and time but no time zone
 System.out.println(ZonedDateTime.now());Contains a date, time, and time zone.

 In order to create a ZonedDateTime, we first need to get the desired time zone. We will
you only need to know three for the exam:
 public static ZonedDateTime of(int year, int month,
  int dayOfMonth, int hour, int minute, int second,
  int nanos, ZoneId zone)
 public static ZonedDateTime of(LocalDate date, LocalTime time,
  ZoneId zone)
 public static ZonedDateTime of(LocalDateTime dateTime, ZoneId zone)

 -the factory pattern:The date and time classes have private constructors along
with static methods that return instances.
var d = new LocalDate(); // DOES NOT COMPILE
Don’t fall for this. You are not allowed to construct a date or time object directly

var d = LocalDate.of(2022, Month.JANUARY, 32) // DateTimeException

-Manipulating Dates and Times

-var date = LocalDate.of(2024, Month.JANUARY, 20);
 date = date.plusMinutes(1); // DOES NOT COMPILE
 LocalDate does not contain time. This means that you cannot add minutes to it

 -var date = LocalDate.of(2024, Month.JANUARY, 20);
  date.plusDays(10);
  System.out.println(date);
  It prints January 20, 2024. Adding 10 days was useless because the program ignored the
  result. Whenever you see immutable types, pay attention to make sure that the return value
  of a method call isn’t ignored


  -Working with Periods
public static void main(String[] args) {
 var start = LocalDate.of(2022, Month.JANUARY, 1);
 var end = LocalDate.of(2022, Month.MARCH, 30);
 var period = Period.ofMonths(1); // create a period
 performAnimalEnrichment(start, end, period);
}
private static void performAnimalEnrichment(LocalDate start, LocalDate end,
 Period period) { // uses the generic period
 var upTo = start;
 while (upTo.isBefore(end)) {
 System.out.println("give new toy: " + upTo);
 upTo = upTo.plus(period); // adds the period
} }The method can add an arbitrary period of time that is passed in. This allows us to reuse
the same method for different periods of time as our zookeeper changes their mind.

 -There are five ways to create a Period class:
   var annually = Period.ofYears(1); // every 1 year
   var quarterly = Period.ofMonths(3); // every 3 months
   var everyThreeWeeks = Period.ofWeeks(3); // every 3 weeks
   var everyOtherDay = Period.ofDays(2); // every 2 days
   var everyYearAndAWeek = Period.of(1, 0, 7); // every year and 7 days

There’s one catch. You cannot chain methods when creating a Period.
Only the last method is used because the Period.of methods are static methods.
var wrong = Period.ofYears(1).ofWeeks(1); // every week

As you can see, the P always starts out the String to show it is a period measure. Then
come the number of years, number of months, and number of days. If any of these are zero,
they are omitted.
Can you figure out what this outputs?
System.out.println(Period.ofMonths(3));The output is P3M. Remember that Java omits any measures that are zero. The last thing
to know about Period is what objects it can be used with

Examples: 3: var date = LocalDate.of(2022, 1, 20);
4: var time = LocalTime.of(6, 15);
5: var dateTime = LocalDateTime.of(date, time);
6: var period = Period.ofMonths(1);
7: System.out.println(date.plus(period)); // 2022–02–20
8: System.out.println(dateTime.plus(period)); // 2022–02–20T06:15
9: System.out.println(time.plus(period)); // Exception--attempts to add a month to an object that has only a time

Working with Durations
Duration works roughly the same way as Period, except it is used with
objects that have time. Duration is output beginning with PT, which you can think of as a
period of time. A Duration is stored in hours, minutes, and seconds. The number of seconds
includes fractional seconds.

var daily = Duration.ofDays(1); // PT24H
var hourly = Duration.ofHours(1); // PT1H
var everyMinute = Duration.ofMinutes(1); // PT1M
var everyTenSeconds = Duration.ofSeconds(10); // PT10S
var everyMilli = Duration.ofMillis(1); // PT0.001S
var everyNano = Duration.ofNanos(1); // PT0.000000001S

Period vs. Duration

Remember that Period and Duration are not equivalent
TABLE 4.7 Where to use Duration and Period
                Can use with Period?        Can use with Duration?
LocalDate               Yes                     No
LocalDateTime           Yes                     Yes
LocalTime               No                      Yes
ZonedDateTime           Yes                     Yes

Working with Instants
The Instant class represents a specific moment in time in the GMT time zone
